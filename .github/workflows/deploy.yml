- name: Deploy to EC2
  env:
    PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
    HOST: ${{ env.PUBLIC_IP }}
    USER: ubuntu
    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    IMAGE_TAG: ${{ github.sha }}
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
  run: |
    echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
    ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} "
      # Activate the virtual environment
      source /home/ubuntu/.aws-cli-venv/bin/activate

      # Log in to ECR from the EC2 instance
      aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

      # Stop and remove existing containers
      sudo docker stop blog_web django_blog || true
      sudo docker rm blog_web django_blog || true

      # Pull the Docker image from ECR
      sudo docker pull $ECR_REGISTRY/blog_project-web:$IMAGE_TAG

      # Run the Docker container
      sudo docker run -d --name blog_web -p 8000:8000 \
      -e AWS_ACCESS_KEY_ID='$AWS_ACCESS_KEY_ID' \
      -e AWS_SECRET_ACCESS_KEY='$AWS_SECRET_ACCESS_KEY' \
      -e AWS_STORAGE_BUCKET_NAME='$AWS_STORAGE_BUCKET_NAME' \
      $ECR_REGISTRY/blog_project-web:$IMAGE_TAG

      # Run Django migrations
      sudo docker exec blog_web python manage.py migrate
    "
