name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: blog_project-web
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Get EC2 instance Public IP
      id: get-ip
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=MyEC2Instance" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query "Reservations[*].Instances[*].PublicIpAddress" \
          --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ env.PUBLIC_IP }}
        USER: ubuntu
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        sh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} "
          # Activate the virtual environment
          source /home/ubuntu/.aws-cli-venv/bin/activate

          # Log in to ECR from the EC2 instance
          aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

          # Stop and remove existing containers
          sudo docker stop blog_web django_blog || true
          sudo docker rm blog_web django_blog || true

          # Pull the Docker image from ECR
          sudo docker pull $ECR_REGISTRY/blog_project-web:$IMAGE_TAG

          # Run the Docker container
          sudo docker run -d --name blog_web -p 8000:8000 \
          -e AWS_ACCESS_KEY_ID='$AWS_ACCESS_KEY_ID' \
          -e AWS_SECRET_ACCESS_KEY='$AWS_SECRET_ACCESS_KEY' \
          -e AWS_STORAGE_BUCKET_NAME='$AWS_STORAGE_BUCKET_NAME' \
          $ECR_REGISTRY/blog_project-web:$IMAGE_TAG

          # Run Django migrations
          sudo docker exec blog_web python manage.py migrate
        "
